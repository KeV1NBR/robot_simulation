import rospy
import fcl
import tf

import numpy as np

# human setting
body = fcl.Cylinder(0.2, 0.6) #0
head = fcl.Sphere(0.15)       #1
arm = fcl.Cylinder(0.1, 0.25) #2,3,5,6
hand = fcl.Sphere(0.1)        #4,7

# robot setting
Link2 = fcl.Cylinder(0.075, 0.45) #0
Link3 = fcl.Cylinder(0.05, 0.4)   #1
Link4 = fcl.Cylinder(0.05, 0.11)  #2
Link5 = fcl.Cylinder(0.085, 0.43) #3

class Collision:
    def __init__(self, partName, part):
        self.partName = partName
        self.part = part


humanPartIndex = {0 : Collision("body", body), 1 : Collision("head", head), 2 : Collision("shoulder_left", arm), 3 : Collision("arm_left", arm), 4 : Collision("hand_left", hand), 5 : Collision("shoulder_right", arm), 6 : Collision("arm_right", arm), 7 : Collision("hand_right", hand)}

robotPartIndex = {0 : Collision("Link2", Link2), 1: Collision("Link3", Link3), 2 : Collision("Link4", Link4), 3 : Collision("Link5", Link5)}

class CollisionPair:
    def __init__(self, humanNum, humanPart, robotPart):
        self.humanNum = humanNum
        self.humanPartInfo = humanPart
        self.robotPartInfo = robotPart
        self.info = fcl.DistanceResult()

    def update(self):
        request = fcl.DistanceRequest()
        #fcl.distance(self.humanPartInfo.part, self.robotPartInfo.part, request, self.info)

    def getInfo(self):
        return self.info

T = np.array([1.0, 0, 0])
transform = fcl.Transform(T)
human1_head = fcl.CollisionObject(head)
human1_body = fcl.CollisionObject(body, transform)

request = fcl.DistanceRequest()
result = fcl.DistanceResult()

ret = fcl.distance(human1_head, human1_body, request, result)
print(result.min_distance)
print(result.nearest_points)

if __name__ == '__main__':
    rospy.init_node('collision_distance')
    listener = tf.TransformListener()

    pairList = []
    for  robotIt in robotPartIndex:
        for num in range(0):
            for humanIt in humanPartIndex:
                pairList.append(CollisionPair(num, robotIt, humanIt))


    rate = rospy.Rate(10.0)
    while not rospy.is_shutdown():
        for it in pairList:
            it.update()
            print((it.humanPartInfo.partName) + ' ' + (it.robotPartInfo.partName) + ' : ' + it.getInfo().min_distance)
        print('\n\n')
        #(trans,rot) = listener.lookupTransform('/turtle2', '/turtle1', rospy.Time(0))
